// File name: Xcos2CIC_quat.sci
// Final Modified Date: 28/09/2015 
// Author: Hao-Chih,Lin (Jim,Lin)
// Email : F44006076@gmail.com
//
// Abstract:
// 	The purpose of this Scilab function is to translate the quaternion data generated by Scilab/Xcos to CIC format file 
//
// Definition:
//	Start_time is 1x2 vector (MJD, format: [MJD_date, MJD_sec])	
// 	Quaternion is Nx4 matrix
//	Quat_time is Nx1 vector (sec, the time mark for each step of simulation result)
//	Sat_Name is a string (e.g. 'BIRDY')
//	REF_FRAME_B is a string (e.g. 'SC_BODY_1')
//	file_name is a string of absolute path for output file (e.g. '/home/birdy/output.txt')
//	# Overall example: Xcos2CIC_quat([54230 20.5], BIRDY_ATT.values, BIRDY_ATT.time, 'BIRDY', 'SC_BODY_1', '/home/birdy/Software/test0001.txt')
//
// Notices:
//	1. Since VTS only accept EME2000, the REF_FRAME_A is set as EME2000 by default
//	2. The default value of ATTITUDE_DIR is: A2B
//	3. The default value of TIME_SYSTEM is: UTC
//	4. This function only focus on Quaternion data inputs, so the default value of ATTITUDE_TYPE is: QUATERNION
// ================================================================================================
// ============================================FUNCTION============================================
// ================================================================================================
function [] = Xcos2CIC_quat(Start_time, Quaternion, Quat_time, Sat_Name, REF_FRAME_B, file_name)

	// Header definition
	time = getdate();
	time1 = [time(1),time(2), time(6), time(7), time(8), time(9), time(10)];

	correction_month = "";
	correction_day   = "";
	correction_hour = "";
	correction_mn = "";
	correction_sec = "";

	if time(6) <10 then
		correction_day   = '0';
	end
	if time(2) <10 then
		correction_month = '0';
	end
	if time(7) <10 then
		correction_hour = '0';
	end
	if time(8) <10 then
		correction_mn = '0';
	end
	if time(9) <10 then
		correction_sec = '0';
	end
	time1   = strcat(['CREATION_DATE = ', string(time1(1)),"-",strcat([correction_month,string(time1(2))]),"-",strcat([correction_day,string(time1(3))]),"T",strcat([correction_hour,string(time1(4))]),":",strcat([correction_mn,string(time1(5))]),":",strcat([correction_sec,string(time1(6))]),".",string(time1(7)) ]);

	// Write the header info
	fd = mopen(file_name,'wt');
	mfprintf(fd,'CIC_AEM_VERS = 1.0\n');
	mfprintf(fd,'%s\n',time1);
	mfprintf(fd,'ORIGINATOR = DOCKing System\n');
	mfprintf(fd,'\n');
	mfprintf(fd,'META_START\n');
	mfprintf(fd,'\n');
	mfprintf(fd,'OBJECT_NAME = %s\n',Sat_Name);
	mfprintf(fd,'OBJECT_ID = %s\n',Sat_Name);
	mfprintf(fd,'REF_FRAME_A = EME2000\n');
	mfprintf(fd,'REF_FRAME_B = %s\n',REF_FRAME_B);
	mfprintf(fd,'ATTITUDE_DIR = A2B\n');
	mfprintf(fd,'TIME_SYSTEM = UTC\n');
	mfprintf(fd,'ATTITUDE_TYPE = QUATERNION\n');
	mfprintf(fd,'\n');
	mfprintf(fd,'META_STOP\n');
	mfprintf(fd,'\n');
	
	// Create Nx2 MJD matrix
	Quat_time = Quat_time + Start_time(2);
	for i=1:1:size(Quat_time,'r')
		if (Quat_time(i) < 86400.0)		
			Date(i,:) = [Start_time(1), Quat_time(i)];
		else
			Quat_time(  i:size(Quat_time,'r')  ) = Quat_time(  i:size(Quat_time,'r')  ) - 86400.0;
			Start_time(1) = Start_time(1) + 1;			
			Date(i,:) = [Start_time(1), Quat_time(i)];
		end
	end		

	// Write the data into specificed file
       	for i=1:1:size(Quat_time,'r')
            	mfprintf(fd,'%i %f %f %f %f %f\n',Date(i,1),Date(i,2),Quaternion(i,1),Quaternion(i,2),Quaternion(i,3),Quaternion(i,4));
	end
   
	mclose(fd);


endfunction
